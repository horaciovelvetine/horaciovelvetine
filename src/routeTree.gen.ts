/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WritingIndexRouteImport } from './routes/writing/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as WritingSlugRouteImport } from './routes/writing/$slug'
import { Route as ProjectsTheWikiverseRouteImport } from './routes/projects/the-wikiverse'
import { Route as ProjectsSolvedokuRouteImport } from './routes/projects/solvedoku'
import { Route as ProjectsRockPaperScissorsRouteImport } from './routes/projects/rock-paper-scissors'

const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WritingIndexRoute = WritingIndexRouteImport.update({
  id: '/writing/',
  path: '/writing/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const WritingSlugRoute = WritingSlugRouteImport.update({
  id: '/writing/$slug',
  path: '/writing/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsTheWikiverseRoute = ProjectsTheWikiverseRouteImport.update({
  id: '/projects/the-wikiverse',
  path: '/projects/the-wikiverse',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsSolvedokuRoute = ProjectsSolvedokuRouteImport.update({
  id: '/projects/solvedoku',
  path: '/projects/solvedoku',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRockPaperScissorsRoute =
  ProjectsRockPaperScissorsRouteImport.update({
    id: '/projects/rock-paper-scissors',
    path: '/projects/rock-paper-scissors',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/projects/rock-paper-scissors': typeof ProjectsRockPaperScissorsRoute
  '/projects/solvedoku': typeof ProjectsSolvedokuRoute
  '/projects/the-wikiverse': typeof ProjectsTheWikiverseRoute
  '/writing/$slug': typeof WritingSlugRoute
  '/projects': typeof ProjectsIndexRoute
  '/writing': typeof WritingIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/projects/rock-paper-scissors': typeof ProjectsRockPaperScissorsRoute
  '/projects/solvedoku': typeof ProjectsSolvedokuRoute
  '/projects/the-wikiverse': typeof ProjectsTheWikiverseRoute
  '/writing/$slug': typeof WritingSlugRoute
  '/projects': typeof ProjectsIndexRoute
  '/writing': typeof WritingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/projects/rock-paper-scissors': typeof ProjectsRockPaperScissorsRoute
  '/projects/solvedoku': typeof ProjectsSolvedokuRoute
  '/projects/the-wikiverse': typeof ProjectsTheWikiverseRoute
  '/writing/$slug': typeof WritingSlugRoute
  '/projects/': typeof ProjectsIndexRoute
  '/writing/': typeof WritingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/projects/rock-paper-scissors'
    | '/projects/solvedoku'
    | '/projects/the-wikiverse'
    | '/writing/$slug'
    | '/projects'
    | '/writing'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/projects/rock-paper-scissors'
    | '/projects/solvedoku'
    | '/projects/the-wikiverse'
    | '/writing/$slug'
    | '/projects'
    | '/writing'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/projects/rock-paper-scissors'
    | '/projects/solvedoku'
    | '/projects/the-wikiverse'
    | '/writing/$slug'
    | '/projects/'
    | '/writing/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  ProjectsRockPaperScissorsRoute: typeof ProjectsRockPaperScissorsRoute
  ProjectsSolvedokuRoute: typeof ProjectsSolvedokuRoute
  ProjectsTheWikiverseRoute: typeof ProjectsTheWikiverseRoute
  WritingSlugRoute: typeof WritingSlugRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  WritingIndexRoute: typeof WritingIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/writing/': {
      id: '/writing/'
      path: '/writing'
      fullPath: '/writing'
      preLoaderRoute: typeof WritingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/writing/$slug': {
      id: '/writing/$slug'
      path: '/writing/$slug'
      fullPath: '/writing/$slug'
      preLoaderRoute: typeof WritingSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/the-wikiverse': {
      id: '/projects/the-wikiverse'
      path: '/projects/the-wikiverse'
      fullPath: '/projects/the-wikiverse'
      preLoaderRoute: typeof ProjectsTheWikiverseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/solvedoku': {
      id: '/projects/solvedoku'
      path: '/projects/solvedoku'
      fullPath: '/projects/solvedoku'
      preLoaderRoute: typeof ProjectsSolvedokuRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/rock-paper-scissors': {
      id: '/projects/rock-paper-scissors'
      path: '/projects/rock-paper-scissors'
      fullPath: '/projects/rock-paper-scissors'
      preLoaderRoute: typeof ProjectsRockPaperScissorsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  ProjectsRockPaperScissorsRoute: ProjectsRockPaperScissorsRoute,
  ProjectsSolvedokuRoute: ProjectsSolvedokuRoute,
  ProjectsTheWikiverseRoute: ProjectsTheWikiverseRoute,
  WritingSlugRoute: WritingSlugRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  WritingIndexRoute: WritingIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
